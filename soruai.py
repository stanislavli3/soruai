"""Welcome to Reflex! This file outlines the steps to create a basic app."""

from rxconfig import config
import re
# from mama import create_flashcard_prompt
import reflex as rx


import requests
import google.generativeai as genai
import os

# Configuration Constants
API_URL = "https://api-inference.huggingface.co/models/microsoft/trocr-base-handwritten"
HEADERS = {"Authorization": "Bearer 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"}
API_KEY = "AIzaSyCoVWDIcVhf7QTYpOzwr2ScYi_qRj40X-U"

# Configuring Google API
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel('gemini-pro')

docs_url = "https://reflex.dev/docs/getting-started/introduction/"
filename = f"{config.app_name}/{config.app_name}.py"

class State(rx.State):
    img: list = []  # If this holds multiple image filenames
    cards_list: list[tuple[str, str]] = []  # Actual cards, with back and front, in one tuple
    visual_cards_list: list[str] = [] # List of cards (front or back side) that are visible to the user
    flash_text: str = "" # Used for storing the text generated by the model
    processing: bool = False 
    complete: bool = False
    # test_card: list[tuple[str, str]] = [("Front: What is the capital of France?", "Back: Paris")] # Use for testinf

    async def split_flashcards_list(self, data: list[str]):
        # Remove any empty entries and extra whitespace
        pattern = r"^\**\s*(Front|Back)\**\s*:\s*"  # Pattern to remove any leading asterisks, spaces, and "Front:" or "Back:"
        cleaned_data = [re.sub(pattern, '', line.strip()) for line in data if line.strip()]
        fronts = []
        

        # Check if the number of elements in the list is even after cleaning
        if len(cleaned_data) % 2 != 0:
            raise ValueError("The number of flashcard elements must be even (each front should have a corresponding back).")

        # Create pairs of (front, back)
        flashcards = []
        for i in range(0, len(cleaned_data), 2):
            front = cleaned_data[i]
            fronts.append(front)
            back = cleaned_data[i+1]
            flashcards.append((front, back))
        
        self.cards_list = flashcards
        self.visual_cards_list = fronts


    async def create_flashcard_prompt(self, files: list[rx.UploadFile]):
        self.processing = True

        # Handle the upload of file(s).
        for file in files:
            upload_data = await file.read()
            outfile = rx.get_upload_dir() / file.filename

            # Save the file.
            with outfile.open("wb") as file_object:
                file_object.write(upload_data)

            # Update the img var.
            # self.img = file.filename
            self.img.append(file.filename)

        print("Creating flashcard prompt")
        print(self.img)
        # Text recognition from image
        with open(file.filename, "rb") as f:
            image_data = f.read()

        print("read image data")
        ocr_response = requests.post(API_URL, headers=HEADERS, data=image_data)
        generated_text = ocr_response.json()[0]["generated_text"]
        print("generated text", generated_text)

        # Generate flashcards based on OCR result
        prompt = f"""I want you to create a flashcards for a given topic. Each flashcard consists of the front and back side. 
        Front of the Flashcard: This side should have a question or a key concept that triggers your memory. Think of it as the prompt for your brain. For example, if you are learning Spanish, you might write, 'How do you say ‘apple’ in Spanish?' Make sure it's clear and concise.
        Back of the Flashcard: This side should answer the question or explain the concept from the front. Continuing our example, you would write 'Manzana', which is the Spanish word for 'apple'. Here, you can include additional details to help clarify the answer if necessary, like an image of an apple or a sentence using the word.
        Limit both front and back side to 100 characters.
        
        Write them in the following format, without spaces: 
        Front: text for front of the Flashcard
        Back: back for back of the Flashcard
        Front: text for front of the Flashcard
        Back: back for back of the Flashcard
        Create at least 5 of flashcards on the topic in provided text: {generated_text}"""
        
        # Get response from Gemini model
        response = model.generate_content(prompt)
        self.flash_text = response.text
        print(self.flash_text)
        self.processing = False
        self.complete = True
        await self.split_flashcards_list(self.flash_text.split('\n'))  # Assuming flash_text contains data in a format splitable into flashcards

    async def swap_card(self, idx):
        if self.visual_cards_list[idx] == self.cards_list[idx][0]:
            self.visual_cards_list[idx] = self.cards_list[idx][1]
        else:
            self.visual_cards_list[idx] = self.cards_list[idx][0]

    async def upload(self, files: list[rx.UploadFile]):
        
        await self.create_flashcard_prompt(files)
        return rx.redirect("/quizlet")



color = "rgb(107,99,246)"

def navbar():
    """The navbar for the top of the page with 'Soru.ai', 'Blog', 'About' aligned to the left and 'Sign In' to the right."""
    navbar_style = {
        "display": "flex",
        "justify_content": "space-between",
        "align_items": "center",
        "padding": "0.75rem 1rem",
        "background": "white",
        "box_shadow": "0 2px 4px rgba(0,0,0,0.1)",
        "position": "absolute",
        "top": "0",
        "left": "0",
        "width": "100%",
        "z_index": "10"
    }

    link_style = {
        "font-size": "1rem",
        "color": "black",
        "text-decoration": "none",
        "padding": "0.5rem 1rem",  # Uniform padding for all nav links
        "cursor": "pointer"
    }

    sign_in_style = {
        **link_style,  # Spread the base link style and then override as necessary
        "border-radius": "20px",
        "background-color": "#635BFF",
        "color": "white",
        "font-weight": "bold",
    }

    return rx.box(
        rx.hstack(
            rx.text("Soru.ai", style={
                "font-weight": "bold",
                "font-size": "1.5rem",
                "color": "black",
                "margin-right": "2rem",  # Provide some space between the logo and navigation links
            }),
            rx.text("Blog", href="/blog", style=link_style),
            rx.text("About", href="/about", style=link_style),
            rx.spacer(),  # Pushes the 'Sign In' text to the right
            rx.text("Sign In", style=sign_in_style),
            style=navbar_style
        )
    )


def main_banner():
    """Creates a main banner similar to the KyoHealth example."""
    return rx.box(
        rx.text(
            "Your AI-powered Copilot for Education",
            style={
                "font_size": "3rem",  # Large font size for main heading
                "color": "white",  # Dark text for contrast
                "text_align": "center",  # Centered text
                "margin": "1rem 0",  # Margin top and bottom
            }
        ),
        style = {
            "padding": "4rem 1rem",              # Padding around the text
            "border_radius": "0.75rem",           # Slight rounding of the corners
            "background": "rgba(255, 255, 255, 0.05)",  # Transparent white background
            "color": "white",                    # White text
            "width": "100%",                     # Full width of the banner
            "box_shadow": "0 4px 10px 0 rgba(0, 0, 0, 0.15)"  # Subtle shadow for depth
        }

    )


flashcard_style = {
    'display': 'flex',
    'flex_direction': 'column',
    'justify_content': 'center',
    'align_items': 'center',
    'margin': '1rem 0',
    'padding': '1.5rem',
    'background': 'white',
    'border': '1px solid #ddd',
    'border_radius': '10px',
    'box_shadow': '0px 0px 10px rgba(0, 0, 0, 0.1)',
    'width': '60vw',  # Control the width of the flashcards
    'max_width': '500px',  # Maximum width of the flashcards
    'cursor': 'pointer',
}

def index():
    """The main view."""
    upload_box_style = {
        'display': 'flex',
        'flex-direction': 'column',
        'justify-content': 'center',
        'align-items': 'center',
        'border': f'2px dashed {color}',
        'border-radius': '10px',
        'padding': '2em',
        'margin': '2em 0',
        'hover': {
            'border-color': '#ffffff',
            'background': 'rgba(255, 255, 255, 0.1)',
        },
        'active': {
            'border-color': '#ffffff',
            'background': 'rgba(255, 255, 255, 0.2)',
        },
    }

    return rx.vstack(
        navbar(),
        main_banner(),
        rx.center(
            rx.upload(
                rx.vstack(
                    rx.button(
                        "Select File",
                        color=color,
                        bg="white",
                        border=f"2px solid {color}",
                        padding="1em 2em",  # Increase padding for a larger button
                        border_radius="10px",  # Rounded corners
                        font_weight="bold",  # Make the text bold
                        text_transform="uppercase",  # Capitalize text for emphasis
                        box_shadow="0 4px 8px 0 rgba(0,0,0,0.2)",  # Box shadow for a 3D effect
                        hover_bg="#e1e1e1",  # Slightly darker background on hover for interactivity
                        cursor="pointer",  # Change cursor to indicate button
                        transition="all 0.3s ease-in-out",  # Smooth transition for hover effects
                    ),
                    rx.text(
                        "Drag and drop files here or click to select files",
                        color="white",
                        margin="1em",
                        font_size="1.1em",  # Slightly larger font size
                        text_shadow="1px 1px 2px grey",  # Text shadow for better readability
                    )
                ),
                id="upload1",
                style=upload_box_style,  # Apply the custom styles
            ),
            width="100%",  # Ensure the centering container takes full width
        ),
        rx.hstack(rx.foreach(rx.selected_files("upload1"), rx.text)),
        rx.button(
    "Upload",
    on_click=State.upload(rx.upload_files(upload_id="upload1")),
    color=color,
    bg="white",
    border=f"2px solid {color}",
    padding="1em 2em",  # Matched padding
    border_radius="10px",  # Matched border-radius
    font_weight="bold",  # Matched font weight
    text_transform="uppercase",  # Matched text transform
    box_shadow="0 4px 8px 0 rgba(0,0,0,0.2)",  # Matched box shadow
    hover_bg="#e1e1e1",  # Matched hover background color
    cursor="pointer",  # Change cursor to indicate button
    transition="all 0.3s ease-in-out",  # Smooth transition for hover effects
)
,
        padding="5em",
        bg="linear-gradient(to right, #614385, #516395)",
        height="100vh",
    )



def fb(card, index):
    # Define your card style here
    card_style = {
        'padding': '10px',
        'margin': '10px 0',  # Add some space between cards
        'border': '1px solid #ddd',
        'border_radius': '5px',
        'box_shadow': '0 2px 4px rgba(0,0,0,0.1)',
        'width': '100%',  # Full width of the container
    }
    return rx.box(
        rx.text(card, style={'font_size': '1rem', 'color': '#333'}),
        on_click=lambda: State.swap_card(index),
        style=card_style
    )

def quizlet_page():
    flashcards_content = rx.box(
        rx.foreach(State.img, lambda img: rx.image(src=rx.get_upload_url(State.img), 
                                                   width="50vw",
                                                   height="auto",
                                                   border="5px solid #555")),
        rx.foreach(
        State.visual_cards_list,
        lambda card, index: fb(card, index))
    )

    content = rx.cond(
        State.processing,
        rx.chakra.circular_progress(is_indeterminate=True),
        rx.cond(
            State.complete,
            flashcards_content,
            rx.text("Waiting to process flashcards...")
        )
    )

    return rx.vstack(
        navbar(),
        rx.box(content, style={'padding': '5em', 'align_items': 'center', 'width': '100vw'}),
        style={'align_items': 'center', 'justify_content': 'center', 'width': '100vw', 'min_height': '100vh'}
    )

# ... (Your existing app setup and page registration)





app = rx.App()
app.add_page(index)
app.add_page(quizlet_page, route="/quizlet")

